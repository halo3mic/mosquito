from web3 import Web3
from web3.gas_strategies.time_based import construct_time_based_gas_price_strategy
import json
import time


get_wait_time = lambda blocks_left: blocks_left*(1799/239) - 14.1176


def submit_tx(tx):
	try:
		signed_tx =  w3.eth.account.signTransaction(tx, private_key=PRIVATE_KEY)
		return w3.eth.sendRawTransaction(signed_tx.rawTransaction).hex()
	except Exception as e:
		raise e


def wait_for_block(target_block, sleep_function):
	while 1:
		t0 = time.time()
		latest_block = w3.eth.getBlock('latest')['number']
		print(f"Function call took {time.time()-t0} sec | Continuing at {time.time()}")
		print(f"Current block is {latest_block}")
		diff = target_block - latest_block
		if diff <= 0:
			raise Exception("Block already mined")
		print(f"{diff} blocks left")
		if diff==1:
			return
		sleep_time = get_wait_time(diff)
		print(f"Lets wait for {sleep_time} sec | Continue at {time.time()+sleep_time}")
		time.sleep(sleep_time)


def main():
	contract_abi = json.dumps(json.load(open(CONTRACT_ABI_PATH)))
	half_rekt = w3.eth.contract(address=CONTRACT_ADDRESS, abi=contract_abi)
	exploit_block = half_rekt.functions.nextExploitBlock().call()+1
	print(f"Exploit possible at block {exploit_block}")


	gas_amount = 70000
	# gas_price = 79*10**9
	gas_prices = [79*10**9, 80*10**9, 81*10**9]

	for gp in gas_prices:
		if gp/10**9 > 350:
			raise Exception(f"Gas price too damn high: {gp}")

	tx1 = {
		    "nonce": w3.eth.getTransactionCount(MY_ADDRESS),
		    "gasPrice": gas_prices[0],
		    "gas": gas_amount,
		    "from": MY_ADDRESS,
		    "to": CONTRACT_ADDRESS,
		    "value": 0,
		    "data": '0x4df6f0c0'
	}	
	tx2 = {
		    "nonce": w3.eth.getTransactionCount(MY_ADDRESS),
		    "gasPrice": gas_prices[1],
		    "gas": gas_amount,
		    "from": MY_ADDRESS,
		    "to": CONTRACT_ADDRESS,
		    "value": 0,
		    "data": '0x4df6f0c0'
	}
	tx2 = {
	    "nonce": w3.eth.getTransactionCount(MY_ADDRESS),
	    "gasPrice": gas_prices[2],
	    "gas": gas_amount,
	    "from": MY_ADDRESS,
	    "to": CONTRACT_ADDRESS,
	    "value": 0,
	    "data": '0x4df6f0c0'
	}
	txs = [tx1, tx2, tx3]
	wait_for_block(exploit_block, get_wait_time)
	hashes = []
	for tx in txs:
		hashes.append(submit_tx(tx))

	print(exploit_block, tx_hash)



def test_it(target_block_, execute=0):
	w3.eth.setGasPriceStrategy(construct_time_based_gas_price_strategy(1, sample_size=120, probability=100))
	suggested_gas_price = w3.eth.gasPrice
	gas_amount = 70000
	print(f"Suggested gas price: {suggested_gas_price/10**9} wei")

	gas_price = suggested_gas_price+10*10**9
	print(f"Execute gas price: {gas_price/10**9} wei")

	if gas_price/10**9 > 300:
		raise Exception(f"Gas price too damn high: {gas_price}")
	tx = {
		    "nonce": w3.eth.getTransactionCount(MY_ADDRESS),
		    "gasPrice": gas_price,
		    "gas": gas_amount,
		    "from": MY_ADDRESS,
		    "to": MY_ADDRESS,
		    "value": 0,
		    "data": '0x4df6f0c0'
	}
	wait_for_block(target_block_, get_wait_time)
	if execute:
		tx_hash = submit_tx(tx)
		print(target_block_, tx_hash)
	else:
		print("Boom ðŸ’£")

if __name__=="__main__":
	# ////////////// BE CAREFUL ///////////////////
	INFURA_TOKEN = "DELETED"
	PRIVATE_KEY = "DELETED"
	# ////////////////////////////////////////////
	INFURA_URL = f"https://mainnet.infura.io/v3/{INFURA_TOKEN}"
	CONTRACT_ABI_PATH = "./0x404A03728Afd06fB934e4b6f0EaF67796912733A.json"
	CONTRACT_ADDRESS = "0x404A03728Afd06fB934e4b6f0EaF67796912733A"
	MY_ADDRESS = "0x2493336E00A8aDFc0eEDD18961A49F2ACAf8793f"
	w3 = Web3(Web3.HTTPProvider(INFURA_URL))
	w3.eth.setGasPriceStrategy(construct_time_based_gas_price_strategy(1, sample_size=120, probability=100))

	main()

	# latest_block = w3.eth.getBlock('latest')['number']
	# test_it(latest_block+10)

